@page "/"

@using EasyCron.UI.Models;
@using EasyCron.UI.Apis;
@inject CronJobApi cronJobApi;

<div style="float: right; margin-bottom : 20px">
    <button type="button" class="btn btn-primary btn-sm">新建</button>
    <button type="button" class="btn btn-danger btn-sm">禁用</button>
    <button type="button" class="btn btn-info btn-sm">启用</button>
    <button type="button" class="btn btn-warning btn-sm">立即执行</button>
    <button type="button" class="btn btn-info btn-sm">修改</button>
    <button type="button" class="btn btn-danger btn-sm">删除</button>
    <button type="button" class="btn btn-info btn-sm">刷新</button>
</div>
<p></p>
@if (jobs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>任务名称</th>
                <th>分组</th>
                <th>最后执行时间</th>
                <th>间隔(Cron)</th>
                <th>状态</th>
                <th>描述</th>
                <th>调用地址</th>
                <th>执行日志</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in jobs)
            {
            <tr>
                <td>@job.Name</td>
                <td>@job.Group</td>
                <td>@job.LastExecuteTime</td>
                <td>@job.Cron</td>
                <td>@job.IsActive</td>
                <td>@job.CronDescription</td>
                <td>@job.CallAddress</td>
                <td><a href="javascript://void">执行日志</a></td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Job> jobs;

    protected override async Task OnInitializedAsync()
    {
        var pagedResult = await cronJobApi.GetJobList();
        jobs = pagedResult.List.ToList();
    }
}
